#!/usr/bin/env python3
import argparse
import datetime
import os
import re
os.environ.setdefault("TF_CPP_MIN_LOG_LEVEL", "2") # Report only TF errors by default

import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

from common_voice_cs import CommonVoiceCs

# TODO: Define reasonable defaults and optionally more parameters
parser = argparse.ArgumentParser()
parser.add_argument("--batch_size", default=64, type=int, help="Batch size.")
parser.add_argument("--cnn_dim", default=128, type=int, help="CNN dim.")
parser.add_argument("--cnn_kernel", default=5, type=int, help="CNN kernel size.")
parser.add_argument("--cnn_layers", default=2, type=int, help="CNN layers.")
parser.add_argument("--ctc_beam", default=16, type=int, help="CTC beam.")
parser.add_argument("--dropout", default=0.3, type=float, help="Dropout.")
parser.add_argument("--epochs", default=30, type=int, help="Number of epochs.")
parser.add_argument("--input_dropout", default=0., type=float, help="Input dropout.")
parser.add_argument("--layer_norm", default=False, action="store_true", help="LSTM + layernorm.")
parser.add_argument("--rnn_dim", default=512, type=int, help="RNN dimension.")
parser.add_argument("--rnn_layers", default=4, type=int, help="RNN layers.")
parser.add_argument("--seed", default=42, type=int, help="Random seed.")
parser.add_argument("--threads", default=1, type=int, help="Maximum number of threads to use.")

class Network(tf.keras.Model):
    def __init__(self, args):
        self._ctc_beam = args.ctc_beam

        inputs = tf.keras.layers.Input(shape=[None, CommonVoiceCs.MFCC_DIM], dtype=tf.float32, ragged=True)

        # TODO: Create a suitable model. You should:
        # - use a bidirectional RNN layer(s) to contextualize the input sequences.
        #
        #   Beware that currently when LSTM/GRU process RaggedTensors, they do not use
        #   cuDNN implementation on GPUs, so they are unnecessary slow. As a workaround,
        #   you can convert them to/from dense tensor before/after the rnn call
        #   as described at https://ufal.mff.cuni.cz/courses/npfl114/2021-summer#faq_gpu
        #
        # - optionally use suitable regularization
        #
        # - and finally generate logits for CRC loss/prediction as RaggedTensors.
        #   The logits should be generated by a dense layer with `1 + len(CommonVoiceCs.LETTERS)`
        #   outputs (the plus one is for the CTC blank symbol). Note that no
        #   activation should be used (the CTC operations will take care of it).
        #   Do not forget to use `tf.keras.layers.TimeDistributed`.
        hidden, mask = inputs.to_tensor(), tf.sequence_mask(inputs.row_lengths())
        hidden = tf.keras.layers.Dropout(args.input_dropout)(hidden)

        # CNN layers
        for layer in range(args.cnn_layers):
            residual = hidden
            hidden = tf.keras.layers.Conv1D(args.cnn_dim, kernel_size=args.cnn_kernel, padding="same")(hidden)
            hidden = tf.keras.layers.BatchNormalization()(hidden)
            hidden = tf.keras.layers.ReLU()(hidden)
            if layer: hidden += residual

        # RNN layers
        for layer in range(args.rnn_layers):
            residual = hidden
            if args.layer_norm:
                rnn_layer = tf.keras.layers.RNN(tfa.rnn.LayerNormLSTMCell(args.rnn_dim), return_sequences=True)
            else:
                rnn_layer = tf.keras.layers.LSTM(args.rnn_dim, return_sequences=True)
            hidden = tf.keras.layers.Bidirectional(rnn_layer, merge_mode="sum")(hidden, mask=mask)
            hidden = tf.keras.layers.Dropout(args.dropout)(hidden)
            if layer: hidden += residual
        hidden = tf.RaggedTensor.from_tensor(hidden, inputs.row_lengths())

        logits = tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(1 + len(CommonVoiceCs.LETTERS)))(hidden)

        super().__init__(inputs=inputs, outputs=logits)

        # We compile the model without loss, because `train_step` will directly call
        # the `selt.ctc_loss` method.
        self.compile(optimizer=tf.optimizers.Adam(),
                     metrics=[CommonVoiceCs.EditDistanceMetric()])

        self.tb_callback = tf.keras.callbacks.TensorBoard(args.logdir, update_freq=100, profile_batch=0)
        self.tb_callback._close_writers = lambda: None # A hack allowing to keep the writers open.

    def ctc_loss(self, gold_labels, logits):
        assert isinstance(gold_labels, tf.RaggedTensor), "Gold labels given to CTC loss must be RaggedTensors"
        assert isinstance(logits, tf.RaggedTensor), "Logits given to CTC loss must be RaggedTensors"

        # TODO: Use tf.nn.ctc_loss to compute the CTC loss.
        # - Convert the gold_labels to SparseTensor and pass `None` as `label_length`.
        # - Convert `logits` to a dense Tensor and then either transpose the
        #   logits to `[max_audio_length, batch, dim]` or set `logits_time_major=False`
        # - Use `logits.row_lengths()` method to obtain the `logit_length`
        # - Use the last class (the one with the highest index) as the `blank_index`.
        #
        # The `tc.nn.ctc_loss` returns a value for a single batch example, so average
        # them to produce a single value and return it.
        loss = tf.nn.ctc_loss(
            tf.cast(gold_labels, tf.int32).to_sparse(), logits.to_tensor(), None, tf.cast(logits.row_lengths(), tf.int32),
            logits_time_major=False, blank_index=len(CommonVoiceCs.LETTERS),
        )
        return tf.reduce_mean(loss)

    def ctc_decode(self, logits):
        assert isinstance(logits, tf.RaggedTensor), "Logits given to CTC predict must be RaggedTensors"

        # TODO: Run `tf.nn.ctc_greedy_decoder` or `tf.nn.ctc_beam_search_decoder`
        # to perform prediction.
        # - Convert the `logits` to a dense Tensor and then transpose them
        #   to shape `[max_audio_length, batch, dim]` using `tf.transpose`
        # - Use `logits.row_lengths()` method to obtain the `sequence_length`
        # - Convert the result of the decoded from a SparseTensor to a RaggedTensor
        (predictions,), _ = tf.nn.ctc_beam_search_decoder(
            tf.transpose(logits.to_tensor(), [1, 0, 2]), tf.cast(logits.row_lengths(), tf.int32), beam_width=self._ctc_beam)
        predictions = tf.RaggedTensor.from_sparse(predictions)

        assert isinstance(predictions, tf.RaggedTensor), "CTC predictions must be RaggedTensors"
        return predictions

    # We override the `train_step` method, because:
    # - computing losses on RaggedTensors is not supported in TF 2.4
    # - we do not want to evaluate the training data, because CTC decoding is slow
    def train_step(self, data):
        x, y = data
        with tf.GradientTape() as tape:
            y_pred = self(x, training=True)
            loss = self.ctc_loss(y, y_pred)
            if self.losses: # Add regularization losses if present
                loss += tf.math.add_n(self.losses)
        self.optimizer.minimize(loss, self.trainable_variables, tape=tape)
        return {"loss": loss}

    # We override `predict_step` to run CTC decoding during prediction
    def predict_step(self, data):
        if isinstance(data, tuple): data = data[0]
        y_pred = self(data, training=False)
        y_pred = self.ctc_decode(y_pred)
        return y_pred

    # We override `test_step` to use `predict_step` to obtain CTC predictions.
    def test_step(self, data):
        x, y = data
        y_pred = self.predict_step(data)
        self.compiled_metrics.update_state(y, y_pred)
        return {m.name: m.result() for m in self.metrics}

def main(args):
    # Fix random seeds and threads
    np.random.seed(args.seed)
    tf.random.set_seed(args.seed)
    tf.config.threading.set_inter_op_parallelism_threads(args.threads)
    tf.config.threading.set_intra_op_parallelism_threads(args.threads)

    # Create logdir name
    args.logdir = os.path.join("logs", "{}-{}-{}".format(
        os.path.basename(globals().get("__file__", "notebook")),
        datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"),
        ",".join(("{}={}".format(re.sub("(.)[^_]*_?", r"\1", key), value) for key, value in sorted(vars(args).items())))
    ))

    # Load the data. Using analyses is only optional.
    cvcs = CommonVoiceCs()

    # Create input data pipeline.
    def create_dataset(name):
        def prepare_example(example):
            # TODO: Create suitable batch examples.
            # - example["mfccs"] should be used as input
            # - the example["sentence"] is a UTF-8-encoded string with the target sentence
            #   - split it to unicode characters by using `tf.strings.unicode_split`
            #   - then pass it through the `cvcs.letters_mapping` layer to map
            #     the unicode characters to ids
            return example["mfccs"], cvcs.letters_mapping(tf.strings.unicode_split(example["sentence"], "UTF-8"))

        dataset = getattr(cvcs, name).map(prepare_example)
        dataset = dataset.shuffle(len(dataset), seed=args.seed) if name == "train" else dataset
        dataset = dataset.apply(tf.data.experimental.dense_to_ragged_batch(args.batch_size))
        dataset = dataset.prefetch(tf.data.AUTOTUNE)
        return dataset
    train, dev, test = create_dataset("train"), create_dataset("dev"), create_dataset("test")

    # TODO: Create the model and train it

    # Create the network and train
    model = Network(args)

    logs = model.fit(train, epochs=args.epochs, validation_data=dev, callbacks=[model.tb_callback])

    test_logs = model.evaluate(test, return_dict=True)
    model.tb_callback.on_epoch_end(args.epochs, {"val_test_" + metric: value for metric, value in test_logs.items()})

    # Generate test set annotations, but in args.logdir to allow parallel execution.
    os.makedirs(args.logdir, exist_ok=True)
    with open(os.path.join(args.logdir, "speech_recognition.txt"), "w", encoding="utf-8") as predictions_file:
        # TODO: Predict the CommonVoice sentences.
        predictions = model.predict(test)

        for sentence in predictions:
            print("".join(CommonVoiceCs.LETTERS[char] for char in sentence), file=predictions_file)

if __name__ == "__main__":
    args = parser.parse_args([] if "__file__" not in globals() else None)
    main(args)
